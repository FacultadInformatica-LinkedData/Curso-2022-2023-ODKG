# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15K7P-709udJAzhRvqiMLB2RKHD8m5xks

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
# 7.1 with SPARQL
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
q1 = prepareQuery("""
  SELECT ?personSubclass WHERE {
    ?personSubclass rdfs:subClassOf ns:Person
  }
""",
  initNs = { "ns": ns, "rdfs": RDFS }
  )
# Visualize the results

for r in g.query(q1):
  print(r)

  # 7.1 with rdflib

for t in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(t)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""
# 7.2 with SPARQL
q2 = prepareQuery('''
  SELECT ?individuals WHERE {
    {
      ?individuals rdf:type ns:Person.
    } 
    UNION 
    {
      ?subclasses rdfs:subClassOf* ns:Person.
      ?individuals rdf:type ?subclasses
    }
  }
''',
  initNs = { "ns": ns, "rdfs": RDFS, "rdf": RDF}
  )
for t in g.query(q2):
  print(t)
# Visualize the results
# 7.2 with rdflib
for s,p,o in g.triples((None,RDF.type,ns.Person)):
  print(s)

for person, property, object in g.triples((None, RDFS.subClassOf, ns.Person)):
  for descendant_person, second_property, second_object in g.triples((None, RDF.type, person)):
   print(descendant_person)


"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""
# 7.3 with SPARQL
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
q3 = prepareQuery('''
  SELECT ?individuals ?properties WHERE {
    {
      ?individuals rdf:type ns:Person.
      ?individuals ?properties ?o.
      ?properties rdf:type rdf:Property
    }
     UNION 
    {
      ?subclasses rdfs:subClassOf* ns:Person.
      ?individuals rdf:type ?subclasses.
      ?individuals ?properties ?o.
    }
  }
  ''', initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS }
  )
for y in g.query(q3):
  print(y)

# 7.3 with rdflib

for person, property, object in g.triples((None, RDF.type, ns.Person)):
  for descendant_person, second_property, second_object in g.triples((s, None, None)):
    print(descendant_person, second_property)

for person, property, object in g.triples((None, RDFS.subClassOf, ns.Person)):
  for descendant_person, second_property, second_object in g.triples((None, RDF.type, person)):
    for subdescendant_person, third_property, third_object in g.triples((descendant_person, None, None)):
      print(person, descendant_person, third_property)
