# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MbnICFbdB52h0b3jqQPm6kWW4GJEs3N8

**Task 09: Data linking**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDF, RDFS, OWL
from rdflib.plugins.sparql import prepareQuery
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

ns1 = Namespace("http://data.three.org#")
ns2 = Namespace("http://data.four.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?class rdfs:subClassOf* ns:Person .
    ?Subject rdf:type ?class
  }
  ''', initNs = {
      "ns":ns1,
      "rdfs":RDFS
  }
) # Consulta para buscar personas

q2 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?class rdfs:subClassOf* ns:Person .
    ?Subject rdf:type ?class
  }
  ''', initNs = {
      "ns":ns2,
      "rdfs":RDFS
  }
)

for r in g1.query(q1):
  given1 = g1.value(subject=r.Subject, predicate=vcard.Given, object=None)
  family1 = g1.value(subject=r.Subject, predicate=vcard.Family, object=None)
  print(given1, family1)
  if given1 != None and family1 != None:
    for r2 in g2.query(q2):
      given2 = g2.value(subject=r2.Subject, predicate=vcard.Given, object=None)
      family2 = g2.value(subject=r2.Subject, predicate=vcard.Family, object=None)
      if given2 == given1 and family2 == family1:
        g3.add((r.Subject, OWL.sameAs, r2.Subject))