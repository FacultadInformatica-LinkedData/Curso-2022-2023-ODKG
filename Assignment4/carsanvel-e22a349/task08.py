# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dlrAzRtiwXOjM_PDKBPJgCnuRfXTjRbS

**Task 08: Completing missing data**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

ns = Namespace("http://data.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

properties = [vcard.Given, vcard.Family, vcard.EMAIL]

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?class rdfs:subClassOf* ns:Person .
    ?Subject rdf:type ?class
  }
  ''', initNs = {
      "ns":ns,
      "rdfs":RDFS
  }
)

for r in g1.query(q1): # Buscamos todas las personas en g1
  print(r.Subject)
  for property in properties:
    property_in_g1 = g1.value(subject=r.Subject, predicate=property, object=None) # Para cada una de ellas vemos si le falta alguna de las propiedades
    if property_in_g1 == None:
      property_in_g2 = g2.value(subject=r.Subject, predicate=property, object=None) # Si falta alguna de ellas las buscamos en g2
      if property_in_g2 != None:
        g1.add((r.Subject, property, property_in_g2)) # Si la encontramos en g2, la a√±adimos a g1