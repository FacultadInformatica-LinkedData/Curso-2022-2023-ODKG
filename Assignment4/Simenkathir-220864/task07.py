# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

"""TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL"""


for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s)

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
SELECT ?subclasses 
WHERE {
    ?subclasses rdfs:subClassOf ns:Person.
}

''',
initNs = {"rdfs":RDFS, "ns":ns}
)

for r in g.query(q1):
    print(r.subclasses)


"""ASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)"""


for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q2 = prepareQuery('''
SELECT ?individual 
WHERE {
    ?class rdfs:subclassOf* ns:Person.
    ?individual rdf:type ?class.
}

''',
initNs = {"rdfs":RDFS, "rdf":RDF,"ns":ns}
)

for r in g.query(q2):
    print(r.individual)

"""TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL"""
for s, p, o in g.triples((None, RDF.type, (ns.Person) )):
    for a, b, c in g.triples((s, None, None)):
        print(a, b, c)

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q3 = prepareQuery('''
SELECT ?individual ?prop ?val 
WHERE {
    ?class rdfs:subclassOf* ns:Person.
    ?individual rdf:type ?class.
    ?individual ?prop ?val.
}

''',
initNs = {"rdfs":RDFS, "ns":ns}
)

for r in g.query(q3):
    print(r.individual, r.prop, r.val)

