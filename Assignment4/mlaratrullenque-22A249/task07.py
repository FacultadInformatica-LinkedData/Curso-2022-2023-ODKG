# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-Wu1K67uuxrVOkJf1bPK7Uy8y2SiGx3

Task 07: Querying RDF(s)
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

for s,p,o in g: 
  print(s,p,o)

"""TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL"""

#RDFLib
ns = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

# SPARQL
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?x WHERE { 
    ?x rdfs:subClassOf ns:Person. 
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

for r in g.query(q1):
  print(r)

"""TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)"""

#RDFLib
ns = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)

#Print the individuals from the subclasses of Person (subclass Researcher)
for s,p,o in g.triples((None, RDF.type, ns.Researcher)):
  print(s)

#SPARQL

q2 = prepareQuery('''
  SELECT ?x ?y WHERE { 
    { ?x rdf:type ns:Person }
    UNION {
     ?type rdfs:subClassOf ns:Person.
     ?y rdf:type ?type
    }
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

for r in g.query(q2):
  print(r)

"""TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL

"""

from logging import NOTSET
#RDFLib
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for s1,p1,o1 in g.triples((s,None,None)):
    print(s1,p1)

for sub, pr, obj in g.triples((None, RDFS.subClassOf, ns.Person)): #sub are all the subclasses of Person
  for s2,p2,o2 in g.triples((None,RDF.type,sub)):  #all the individuals from the subclasses of person
    for s3,p3,o3 in g.triples((s2,None,None)):     #from these individuals, we want the properties 
      print(s3,p3)

# SPARQL
q3 = prepareQuery('''
  SELECT ?x ?p WHERE { 
    {?x rdf:type ns:Person. 
    ?x ?p ?value}
    UNION
    { ?y rdfs:subClassOf ns:Person. 
    ?x rdf:type ?y.
    ?x ?p ?value  }
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF,"rdfs":RDFS}
)

for r in g.query(q3):
  print(r)

